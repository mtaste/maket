<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.market.dao.mapper.sys.org.OrgMapper">
	<!-- 获取机构列表 -->
	<select id="getOrgList" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id AS "id",
		a. NAME AS "name",
		a.flag AS "flag"
		FROM
		sys_org a
	</select>
	<!-- 获取机构权限 -->
	<select id="getOrgAuthList" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.auth_id as "authId"
		FROM
		sys_org_auth a
		WHERE
		a.org_id
		= #{orgId,jdbcType=VARCHAR}
	</select>
	<!-- 删除机构权限 -->
	<update id="deleteOrgData" parameterType="java.lang.String">
		DELETE
		FROM
		sys_org_auth
		WHERE
		org_id =#{orgId,jdbcType=VARCHAR};

		DELETE
		FROM
		sys_org
		WHERE
		ID=#{orgId,jdbcType=VARCHAR};
	</update>
	<!-- 保存机构权限 -->
	<update id="saveOrgAuth" parameterType="java.lang.String">
		DELETE
		FROM
		sys_org_auth
		WHERE
		org_id =#{param.orgId,jdbcType=VARCHAR};
		INSERT INTO sys_org_auth
		(id, org_id, auth_id) SELECT
		UUID(),
		#{param.orgId,jdbcType=VARCHAR},
		a.id
		FROM
		sys_auth a
		WHERE
		CONCAT(',',#{param.authIds,jdbcType=VARCHAR},
		',') LIKE CONCAT('%,',
		a.id,
		',%');
	</update>
	<!-- 获取用户部门信息列表 -->
	<select id="getDeptList" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id AS "id",
		a. NAME AS "name",
		'1' as "parentId"
		FROM
		sys_org a
		WHERE
		EXISTS (
		SELECT
		1
		FROM
		sys_user b
		WHERE
		b.id =
		#{userId,jdbcType=VARCHAR}
		AND b.org_id = a.id
		)
		UNION ALL
		SELECT
		a.id AS
		"id",
		a. NAME AS "name",
		a.parent_id AS "parentId"
		FROM
		sys_dept a
		WHERE
		EXISTS (
		SELECT
		1
		FROM
		sys_user b
		WHERE
		b.id = #{userId,jdbcType=VARCHAR}
		AND b.org_id = a.org_id
		)
	</select>
	<!-- 删除部门 -->
	<update id="deleteDeptData" parameterType="java.lang.String">
		DELETE
		FROM
		sys_role_auth
		WHERE EXISTS (
		SELECT
		1
		FROM
		sys_role,
		sys_dept
		WHERE
		sys_role_auth.role_id = sys_role.id
		AND sys_dept.id = sys_role.dept_id
		AND sys_dept.id =#{id,jdbcType=VARCHAR}
		);

		DELETE
		FROM
		sys_dept
		where
		FIND_IN_SET(id,
		getSysDeptNodeId(#{id,jdbcType=VARCHAR}));

		DELETE
		FROM
		sys_role
		WHERE
		dept_id
		=#{id,jdbcType=VARCHAR};
	</update>
	<!-- 获取部门职务 -->
	<select id="getDeptRoleList" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id AS "id",
		a. NAME AS "name"
		FROM
		sys_role a
		WHERE
		a.dept_id =#{deptId,jdbcType=VARCHAR}
	</select>
	<!-- 删除部门职务 -->
	<update id="deleteDeptRoleData" parameterType="java.lang.String">
		DELETE
		FROM
		sys_role_auth
		WHERE EXISTS (
		SELECT
		1
		FROM
		sys_role
		WHERE
		sys_role_auth.role_id = sys_role.id
		and
		sys_role.id=#{id,jdbcType=VARCHAR}
		);
		DELETE
		FROM
		sys_role
		WHERE
		id
		=#{id,jdbcType=VARCHAR};
		DELETE
		FROM sys_user_role where
		role_id=#{id,jdbcType=VARCHAR};
	</update>
	<!-- 获取机构权限列表 -->
	<select id="getOrgAllAuth" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id AS "id",
		a.`name` AS "name",
		a.parent_id AS
		"parentId"
		FROM
		sys_auth a
		WHERE
		EXISTS (
		SELECT
		1
		FROM
		sys_org_auth b
		WHERE
		b.org_id=#{orgId,jdbcType=VARCHAR}
		AND
		FIND_IN_SET(
		a.id,
		getSysAuthParentList (b.auth_id)
		)
		);
	</select>
	<!-- 获取职务权限列表 -->
	<select id="getRoleAuthList" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id
		FROM
		sys_auth a
		WHERE
		EXISTS (
		SELECT
		1
		FROM
		sys_role_auth b
		WHERE
		b.role_id = #{roleId,jdbcType=VARCHAR}
		AND
		FIND_IN_SET(
		a.id,
		getSysAuthParentList(b.auth_id)
		)
		)
	</select>
	<!-- 保存职务权限信息 -->
	<update id="saveRoleAuth" parameterType="java.lang.String">
		DELETE
		FROM
		sys_role_auth
		WHERE
		role_id = #{roleId,jdbcType=VARCHAR};
		INSERT INTO sys_role_auth
		(id, role_id, auth_id) SELECT
		UUID(),
		#{roleId,jdbcType=VARCHAR},
		a.id
		FROM
		sys_auth a
		WHERE
		CONCAT(
		',',
		#{authIds,jdbcType=VARCHAR},
		','
		) LIKE
		CONCAT('%,', a.id, ',%');
	</update>
	<!-- 获取职务可选择用户 -->
	<select id="getRoleUserSelect" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id AS "id",
		a.user_name AS "userName",
		a.`name` AS
		"name"
		FROM
		sys_user a
		WHERE
		NOT EXISTS (
		SELECT
		1
		FROM
		sys_user_role b
		WHERE
		a.id =
		b.user_id
		AND b.role_id =#{param.roleId,jdbcType=VARCHAR}
		) AND
		EXISTS (
		SELECT
		1
		FROM
		sys_user b
		WHERE
		b.org_id =
		a.org_id
		AND b.id =
		#{param.userId,jdbcType=VARCHAR}
		)
		<if test="param.keyword!=null and param.keyword != ''">
			and
			CONCAT(a.user_name,a.name,a.mobile) like
			CONCAT('%',#{param.keyword,jdbcType=VARCHAR},'%')
		</if>
	</select>

	<!-- 保存职务用户信息 -->
	<update id="saveRoleUserData" parameterType="java.lang.String">
		INSERT INTO
		sys_user_role (id, user_id, role_id) SELECT
		UUID(),
		a.id,
		#{param.roleId,jdbcType=VARCHAR}
		FROM
		sys_user a
		WHERE
		EXISTS (
		SELECT
		1
		FROM
		sys_user b
		WHERE
		b.org_id = a.org_id
		AND b.id =
		#{param.userId,jdbcType=VARCHAR}
		)
		AND
		CONCAT(',',
		#{param.userIds,jdbcType=VARCHAR}, ',') LIKE
		CONCAT('%,', a.id, ',%')
		AND NOT
		EXISTS (
		SELECT
		1
		FROM
		sys_user_role c
		WHERE
		a.id = c.user_id
		AND
		c.role_id =
		#{param.roleId,jdbcType=VARCHAR}
		);
	</update>
	<!-- 删除职务 -->
	<update id="removeRoleUserData" parameterType="java.lang.String">
		DELETE
		FROM
		sys_user_role
		WHERE
		role_id = #{param.roleId,jdbcType=VARCHAR}
		AND
		CONCAT(',', #{param.userIds,jdbcType=VARCHAR}, ',') LIKE CONCAT('%,',
		user_id, ',%')
	</update>

	<!-- 获取部门用户信息列表 -->
	<select id="getDeptUserList" parameterType="java.lang.String"
		resultType="java.util.HashMap">
		SELECT
		a.id AS "id",
		a.user_name AS "userName",
		a.`name` AS
		"name",
		a.mobile as "mobile",
		getUserRole(a.id) as "roleName"
		FROM
		sys_user a
		WHERE
		EXISTS(
		select 1 from sys_user_role b ,sys_role c
		where
		b.role_id=c.id
		and b.user_id=a.id
		and
		c.dept_id=#{param.deptId,jdbcType=VARCHAR}
		<if test="param.roleId!=null and param.roleId != ''">
			and c.id=#{param.roleId,jdbcType=VARCHAR}
		</if>
		)
	</select>

</mapper>